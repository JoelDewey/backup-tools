{{- if .Values.cronJob.enabled }}
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ include "backup-tools.fullname" . }}
  labels:
    {{- include "backup-tools.labels" . | nindent 4 }}
spec:
  schedule: "{{ .Values.cronJob.schedule }}"
  concurrencyPolicy: "{{ .Values.cronJob.concurrencyPolicy }}"
  startingDeadlineSeconds: {{ .Values.cronJob.startingDeadlineSeconds }}
  suspend: {{ .Values.cronJob.suspend }}
  jobTemplate:
    spec:
      template:
        metadata:
            {{- with .Values.podAnnotations }}
          annotations:
              {{- toYaml . | nindent 8 }}
            {{- end }}
          labels:
              {{- include "backup-tools.selectorLabels" . | nindent 12 }}
        spec:
            {{- with .Values.imagePullSecrets }}
          imagePullSecrets:
              {{- toYaml . | nindent 8 }}
            {{- end }}
          serviceAccountName: {{ include "backup-tools.serviceAccountName" . }}
          securityContext:
              {{- toYaml .Values.podSecurityContext | nindent 12 }}
          restartPolicy: Never
          containers:
            - name: {{ .Chart.Name }}
              securityContext:
                  {{- toYaml .Values.securityContext | nindent 16 }}
              image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
              imagePullPolicy: {{ .Values.image.pullPolicy }}
              envFrom:
                - configMapRef:
                    name: "{{ include "backup-tools.fullname" . }}-app-env-vars"
                {{- if eq .Values.env.config.app.backupType "COMPRESSED" }}
                - configMapRef:
                    name: "{{ include "backup-tools.fullname" . }}-compressed-env-vars"
                {{- end }}
                {{- if eq .Values.env.config.app.backupType "INCREMENTAL" }}
                - configMapRef:
                    name: "{{ include "backup-tools.fullname" . }}-incr-env-vars"
                {{- end }}
                - configMapRef:
                    name: "{{ include "backup-tools.fullname" . }}-kubernetes-env-vars"
                    optional: true
                - configMapRef:
                    name: "{{ include "backup-tools.fullname" . }}-mongo-env-vars"
                    optional: true
                - configMapRef:
                    name: "{{ include "backup-tools.fullname" . }}-postgres-env-vars"
                    optional: true
              env:
                {{- if .Values.env.config.app.mongoBackupEnabled }}
                {{- with .Values.env.config.mongo }}
                {{- if .hostSecret }}
                - name: MONGO_HOST
                  valueFrom:
                    secretKeyRef:
                      name: {{ .hostSecret.name }}
                      key: {{ .hostSecret.key }}
                {{- end }}
                {{- if .usernameSecret }}
                - name: MONGO_USERNAME
                  valueFrom:
                    secretKeyRef:
                      name: {{ .usernameSecret.name }}
                      key: {{ .usernameSecret.key }}
                {{- end }}
                {{- if .databaseNameSecret }}
                - name: MONGO_DATABASE_NAME
                  valueFrom:
                    secretKeyRef:
                      name: {{ .databaseNameSecret.name }}
                      key: {{ .databaseNameSecret.key }}
                {{- end }}
                {{- if .authDatabaseNameSecret }}
                - name: MONGO_AUTHENTICATION_DATABASE_NAME
                  valueFrom:
                    secretKeyRef:
                      name: {{ .authDatabaseNameSecret.name }}
                      key: {{ .authDatabaseNameSecret.key }}
                {{- end }}
                {{- if .collectionSecret }}
                - name: MONGO_COLLECTION
                  valueFrom:
                    secretKeyRef:
                      name: {{ .collectionSecret.name }}
                      key: {{ .collectionSecret.key }}
                {{- end }}
                {{- end }}
                {{- end}}

                {{- if .Values.env.config.app.postgresBackupEnabled }}
                {{- with .Values.env.config.postgres }}
                {{- if .urlSecret }}
                - name: POSTGRES_URL
                  valueFrom:
                    secretKeyRef:
                      name: {{ .urlSecret.name }}
                      key: {{ .urlSecret.key }}
                {{- else }}
                {{- if .hostSecret }}
                - name: POSTGRES_HOST
                  valueFrom:
                    secretKeyRef:
                      name: {{ .hostSecret.name }}
                      key: {{ .hostSecret.key }}
                {{- end }}
                {{- if .databaseNameSecret }}
                - name: POSTGRES_DATABASE_NAME
                  valueFrom:
                    secretKeyRef:
                      name: {{ .databaseNameSecret.name }}
                      key: {{ .databaseNameSecret.key }}
                {{- end }}
                {{- if .usernameSecret }}
                - name: POSTGRES_USERNAME
                  valueFrom:
                    secretKeyRef:
                      name: {{ .usernameSecret.name }}
                      key: {{ .usernameSecret.key }}
                {{- end }}
                {{- if .passwordSecret }}
                - name: POSTGRES_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: {{ .passwordSecret.name }}
                      key: {{ .passwordSecret.key }}
                {{- end }}
                {{- end }}
                {{- end }}
                {{- end }}
              livenessProbe:
                exec:
                  command:
                    - /bin/sh
                    - -c
                    - ps -o comm | grep backup-tools
                periodSeconds: 5
              readinessProbe:
                exec:
                  command:
                    - /bin/sh
                    - -c
                    - ps -o comm | grep backup-tools
                periodSeconds: 5
              volumeMounts:
                - name: backup-tools-source
                  mountPath: "{{ .Values.env.config.app.sourcePath }}"
                - name: backup-tools-destination
                  mountPath: "{{ .Values.env.config.app.destinationPath }}"
                {{- with .Values.volume }}
                {{- range .sources }}
                - name: {{ .name }}
                  mountPath: {{ .mountPath }}
                  readOnly: true
                {{- end }}
                {{- end }}
                {{- range .Values.extraVolumes }}
                - name: "{{ .name }}"
                  {{- .specification | toYaml | nindent 18 }}
                {{- end }}
              resources:
                  {{- toYaml .Values.resources | nindent 16 }}
            {{- with .Values.volume }}
          volumes:
            - name: backup-tools-source
              emptyDir:
                sizeLimit: 100Mi
            - name: backup-tools-destination
              persistentVolumeClaim:
                claimName: {{ .destination.claimName }}
            {{- range .sources }}
            - name: {{ .name }}
              persistentVolumeClaim:
                claimName: {{ .claimName }}
                readOnly: true
            {{- end }}
            {{- end }}
            {{- range .Values.extraVolumes }}
            - name: "{{ .name }}"
              {{- .mountSpecification | toYaml | nindent 14 }}
            {{- end }}
            {{- with .Values.nodeSelector }}
          nodeSelector:
              {{- toYaml . | nindent 12 }}
            {{- end }}
            {{- with .Values.affinity }}
          affinity:
              {{- toYaml . | nindent 12 }}
            {{- end }}
            {{- with .Values.tolerations }}
          tolerations:
              {{- toYaml . | nindent 12 }}
            {{- end }}
{{- end}}