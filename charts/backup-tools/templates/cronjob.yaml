apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ include "backup-tools.fullname" . }}
  labels:
    {{- include "backup-tools.labels" . | nindent 4 }}
spec:
  schedule: "{{ .Values.cronJob.schedule }}"
  concurrencyPolicy: "{{ .Values.cronJob.concurrencyPolicy }}"
  startingDeadlineSeconds: {{ .Values.cronJob.startingDeadlineSeconds }}
  jobTemplate:
    spec:
      template:
        metadata:
            {{- with .Values.podAnnotations }}
          annotations:
              {{- toYaml . | nindent 8 }}
            {{- end }}
          labels:
              {{- include "backup-tools.selectorLabels" . | nindent 12 }}
        spec:
            {{- with .Values.imagePullSecrets }}
          imagePullSecrets:
              {{- toYaml . | nindent 8 }}
            {{- end }}
          serviceAccountName: {{ include "backup-tools.serviceAccountName" . }}
          securityContext:
              {{- toYaml .Values.podSecurityContext | nindent 12 }}
          restartPolicy: Never
          containers:
            - name: {{ .Chart.Name }}
              securityContext:
                  {{- toYaml .Values.securityContext | nindent 16 }}
              image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
              imagePullPolicy: {{ .Values.image.pullPolicy }}
              env:
                {{- with .Values.env.config.app }}
                - name: BACKUP_NAME
                  value: "{{ .backupName }}"
                - name: SOURCE_PATH
                  value: "{{ .sourcePath }}"
                - name: DESTINATION_PATH
                  value: "{{ .destinationPath }}"
                - name: MAX_NUMBER_OF_BACKUPS
                  value: "{{ .maxNumberOfBackups }}"
                - name: SCALE_DEPLOYMENT_ENABLED
                  value: "{{ .scaleDeploymentEnabled }}"
                - name: POSTGRES_BACKUP_ENABLED
                  value: "{{ .postgresBackupEnabled }}"
                - name: RUST_BACKTRACE
                  value: "{{ .rustBacktrace }}"
                - name: RUST_LOG
                  value: "{{ .rustLog }}"
                {{- end }}
                {{- with .Values.env.config.incremental }}
                - name: INCR_TIMEOUT
                  value: "{{ .timeout }}"
                {{- if .excludeFilePath }}
                - name: INCR_EXCLUDE_FILE_PATH
                  value: "{{ .excludeFilePath }}"
                {{- end }}
                {{- end }}
                {{- if .Values.env.config.app.scaleDeploymentEnabled }}
                {{- with .Values.env.config.k8s }}
                - name: KUBERNETES_TOKEN_PATH
                  value: "{{ .tokenPath }}"
                - name: KUBERNETES_CACRT_PATH
                  value: "{{ .cacrtPath }}"
                {{- if .serviceNamespace }}
                - name: KUBERNETES_SERVICE_NAMESPACE
                  value: "{{ .serviceNamespace }}"
                {{- end}}
                - name: KUBERNETES_SERVICE_DEPLOYMENT_NAME
                  value: "{{ .serviceDeploymentName }}"
                {{- if .namespaceFile }}
                - name: KUBERNETES_NAMESPACE_FILE_PATH
                  value: "{{ .namespaceFile }}"
                {{- end}}
                {{- end }}
                {{- end }}
                {{- if .Values.env.config.app.postgresBackupEnabled }}
                {{- with .Values.env.config.postgres }}
                {{- if or .url .urlSecret }}
                - name: POSTGRES_URL
                  {{- if .url }}
                  value: {{ .url }}
                  {{- else }}
                  valueFrom:
                    secretKeyRef:
                      name: {{ .urlSecret.name }}
                      key: {{ .urlSecret.key }}
                  {{- end }}
                {{- else }}
                {{- if or .host .hostSecret }}
                - name: POSTGRES_HOST
                  {{- if .host }}
                  value: {{ .host }}
                  {{- else }}
                  valueFrom:
                    secretKeyRef:
                      name: {{ .hostSecret.name }}
                      key: {{ .hostSecret.key }}
                  {{- end }}
                {{- end }}
                - name: POSTGRES_PORT
                  value: "{{ .port | default "5432" }}"
                {{- if or .databaseName .databaseNameSecret }}
                - name: POSTGRES_DATABASE_NAME
                  {{- if .databaseName }}
                  value: {{ .databaseName }}
                  {{- else }}
                  valueFrom:
                    secretKeyRef:
                      name: {{ .databaseNameSecret.name }}
                      key: {{ .databaseNameSecret.key }}
                  {{- end }}
                {{- end }}
                {{- if or .username .usernameSecret }}
                - name: POSTGRES_USERNAME
                  {{- if .username }}
                  value: {{ .username }}
                  {{- else }}
                  valueFrom:
                    secretKeyRef:
                      name: {{ .usernameSecret.name }}
                      key: {{ .usernameSecret.key }}
                  {{- end }}
                {{- end }}
                {{- if or .password .passwordSecret }}
                - name: POSTGRES_PASSWORD
                  {{- if .password }}
                  value: {{ .password }}
                  {{- else }}
                  valueFrom:
                    secretKeyRef:
                      name: {{ .passwordSecret.name }}
                      key: {{ .passwordSecret.key }}
                  {{- end }}
                {{- end }}
                {{- end }}
                {{- end }}
                {{- end }}
              livenessProbe:
                exec:
                  command:
                    - /bin/sh
                    - -c
                    - ps -o comm | grep backup-tools
                periodSeconds: 5
              readinessProbe:
                exec:
                  command:
                    - /bin/sh
                    - -c
                    - ps -o comm | grep backup-tools
                periodSeconds: 5
              volumeMounts:
                - name: backup-tools-source
                  mountPath: "{{ .Values.env.config.app.sourcePath }}"
                - name: backup-tools-destination
                  mountPath: "{{ .Values.env.config.app.destinationPath }}"
                {{- with .Values.volume }}
                {{- range .sources }}
                - name: {{ .name }}
                  mountPath: {{ .mountPath }}
                {{- end }}
                {{- end }}
                {{- range .Values.extraVolumes }}
                - name: "{{ .name }}"
                  {{- .specification | toYaml | nindent 18 }}
                {{- end }}
              resources:
                  {{- toYaml .Values.resources | nindent 16 }}
            {{- with .Values.volume }}
          volumes:
            - name: backup-tools-source
              emptyDir:
                sizeLimit: 100Mi
            - name: backup-tools-destination
              persistentVolumeClaim:
                claimName: {{ .destination.claimName }}
            {{- range .sources }}
            - name: {{ .name }}
              persistentVolumeClaim:
                claimName: {{ .claimName }}
            {{- end }}
            {{- end }}
            {{- range .Values.extraVolumes }}
            - name: "{{ .name }}"
              {{- .mountSpecification | toYaml | nindent 14 }}
            {{- end }}
            {{- with .Values.nodeSelector }}
          nodeSelector:
              {{- toYaml . | nindent 12 }}
            {{- end }}
            {{- with .Values.affinity }}
          affinity:
              {{- toYaml . | nindent 12 }}
            {{- end }}
            {{- with .Values.tolerations }}
          tolerations:
              {{- toYaml . | nindent 12 }}
            {{- end }}
